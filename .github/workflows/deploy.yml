name: Deploy Template to ShadcnStore

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy template to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-template:
    runs-on: ubuntu-latest

    # Determine environment
    env:
      DEPLOY_ENV: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'production' }}
      TEMPLATE_NAME: shadcn-dashboard-landing-template
      TEMPLATE_TYPE: dashboard

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment variables
        id: deploy-vars
        run: |
          echo "RELEASE_NAME=template_$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
          echo "BASE_URL=/templates/${{ env.TEMPLATE_TYPE }}/${{ env.TEMPLATE_NAME }}/" >> $GITHUB_OUTPUT
          echo "BASENAME=/templates/${{ env.TEMPLATE_TYPE }}/${{ env.TEMPLATE_NAME }}" >> $GITHUB_OUTPUT
          echo "TEMPLATE_DIR=/var/www/shadcnstore/templates/${{ env.TEMPLATE_TYPE }}/${{ env.TEMPLATE_NAME }}" >> $GITHUB_OUTPUT

          if [[ "${{ env.DEPLOY_ENV }}" == "production" ]]; then
            echo "DOMAIN=shadcnstore.com" >> $GITHUB_OUTPUT
          else
            echo "DOMAIN=staging.shadcnstore.com" >> $GITHUB_OUTPUT
            echo "TEMPLATE_DIR=/var/www/shadcnstore/templates-staging/${{ env.TEMPLATE_TYPE }}/${{ env.TEMPLATE_NAME }}" >> $GITHUB_OUTPUT
          fi

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./vite-version
        run: |
          pnpm install --frozen-lockfile

      - name: Build template
        working-directory: ./vite-version
        env:
          BASE_URL: ${{ steps.deploy-vars.outputs.BASE_URL }}
          BASENAME: ${{ steps.deploy-vars.outputs.BASENAME }}
        run: |
          echo "🔨 Building template with configuration:"
          echo "  Base URL: $BASE_URL"
          echo "  Basename: $BASENAME"
          echo "  Environment: ${{ env.DEPLOY_ENV }}"

          # Clean previous build
          rm -rf dist/

          # Build with deployment configuration
          VITE_BASENAME="$BASENAME" pnpm exec vite build --base="$BASE_URL"

          # Verify build output
          echo "📁 Build output:"
          ls -la dist/ | head -10

          # Create build info file
          echo "Template: ${{ env.TEMPLATE_NAME }}" > dist/build-info.txt
          echo "Type: ${{ env.TEMPLATE_TYPE }}" >> dist/build-info.txt
          echo "Release: ${{ steps.deploy-vars.outputs.RELEASE_NAME }}" >> dist/build-info.txt
          echo "Environment: ${{ env.DEPLOY_ENV }}" >> dist/build-info.txt
          echo "Base URL: $BASE_URL" >> dist/build-info.txt
          echo "Commit: ${{ github.sha }}" >> dist/build-info.txt
          echo "Built at: $(date -u)" >> dist/build-info.txt

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          ssh-keyscan -p 1705 46.202.179.245 >> ~/.ssh/known_hosts

          cat >>~/.ssh/config <<EOF
          Host deploy-server
            HostName 46.202.179.245
            Port 1705
            User github-deploy
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
            IdentitiesOnly yes
          EOF

          chmod 600 ~/.ssh/config

      - name: Deploy template to server
        env:
          TEMPLATE_DIR: ${{ steps.deploy-vars.outputs.TEMPLATE_DIR }}
          RELEASE_NAME: ${{ steps.deploy-vars.outputs.RELEASE_NAME }}
          DOMAIN: ${{ steps.deploy-vars.outputs.DOMAIN }}
        working-directory: ./vite-version
        run: |
          echo "🚀 Starting template deployment to ${{ env.DEPLOY_ENV }} environment..."

          # Create template directory structure on server
          ssh deploy-server "
            set -e
            echo '📁 Setting up template directory structure...'

            # Ensure template directory structure exists
            sudo mkdir -p $TEMPLATE_DIR/{releases,shared}
            sudo chown -R github-deploy:github-deploy $TEMPLATE_DIR

            # Create new release directory
            RELEASE_DIR=$TEMPLATE_DIR/releases/$RELEASE_NAME
            mkdir -p \$RELEASE_DIR

            echo '✅ Release directory created: \$RELEASE_DIR'
          "

          # Upload built template
          echo "📤 Uploading built template..."
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='src' \
            --exclude='public' \
            --exclude='*.config.*' \
            --exclude='package*.json' \
            dist/ deploy-server:$TEMPLATE_DIR/releases/$RELEASE_NAME/

          # Complete deployment on server
          ssh deploy-server "
            set -e
            RELEASE_DIR=$TEMPLATE_DIR/releases/$RELEASE_NAME

            echo '🔗 Updating current symlink...'

            # Update current symlink
            if [ -L '$TEMPLATE_DIR/current' ] || [ -e '$TEMPLATE_DIR/current' ]; then
              rm -rf $TEMPLATE_DIR/current
            fi
            ln -sfn $TEMPLATE_DIR/releases/$RELEASE_NAME $TEMPLATE_DIR/current

            # Set proper permissions
            chmod -R 755 $TEMPLATE_DIR/current

            echo '🧹 Cleaning up old releases...'
            # Keep last 3 template releases only
            cd $TEMPLATE_DIR/releases
            if [ \$(ls -1 | wc -l) -gt 3 ]; then
              ls -t | tail -n +4 | xargs -I {} rm -rf {}
              echo '✅ Old releases cleaned up'
            else
              echo 'ℹ️  No old releases to clean up'
            fi

            echo '✅ Template deployment completed!'
            echo '📂 Template location: $TEMPLATE_DIR/current'
            echo '🔗 Accessible at: https://$DOMAIN/templates/${{ env.TEMPLATE_TYPE }}/${{ env.TEMPLATE_NAME }}/'
          "

      - name: Health check
        run: |
          sleep 5
          echo "🏥 Performing health check..."

          TEMPLATE_URL="https://${{ steps.deploy-vars.outputs.DOMAIN }}/templates/${{ env.TEMPLATE_TYPE }}/${{ env.TEMPLATE_NAME }}/"

          response=$(curl -s -o /dev/null -w "%{http_code}" "$TEMPLATE_URL")
          if [ $response -eq 200 ]; then
            echo "✅ Template is healthy and responding!"
            echo "🌐 Template URL: $TEMPLATE_URL"
          else
            echo "❌ Health check failed with status: $response"
            echo "🔍 Checking template directory on server..."
            ssh deploy-server "ls -la ${{ steps.deploy-vars.outputs.TEMPLATE_DIR }}/current/ | head -10" || true
            echo "🔍 Checking nginx error logs..."
            ssh deploy-server "sudo tail -20 /var/log/nginx/error.log" || true
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        run: |
          TEMPLATE_URL="https://${{ steps.deploy-vars.outputs.DOMAIN }}/templates/${{ env.TEMPLATE_TYPE }}/${{ env.TEMPLATE_NAME }}/"

          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Template deployment to ${{ env.DEPLOY_ENV }} completed successfully!"
            echo "🌐 Template: $TEMPLATE_URL"
            echo "📦 Release: ${{ steps.deploy-vars.outputs.RELEASE_NAME }}"
            echo "📋 Template Type: ${{ env.TEMPLATE_TYPE }}"
            echo "🏷️  Template Name: ${{ env.TEMPLATE_NAME }}"
          else
            echo "❌ Template deployment to ${{ env.DEPLOY_ENV }} failed!"
            echo "🔍 Check the logs above for detailed error information"
          fi
